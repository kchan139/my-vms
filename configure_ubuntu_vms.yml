---
- name: Configure Ubuntu VMs
  hosts: ubuntu_vms
  become: yes

  # vars:
    # go_version: "1.24.3"
    # go_install_dir: "/usr/local"
    # go_tar_file: "go{{ go_version }}.linux-{{ ansible_architecture | replace('x86_64', 'amd64') | replace('aarch64', 'arm64') }}.tar.gz"
    # go_download_url: "https://dl.google.com/go/{{ go_tar_file }}"

  tasks:
    # - name: Stop packagekitd to free apt lock (if running)
    #   ansible.builtin.systemd:
    #     name: packagekit
    #     state: stopped
    #   ignore_errors: yes # Ignore if packagekit is not found or not running, this is often the case.

    # - name: Kill any remaining apt-related processes (if lock persists)
    #   ansible.builtin.shell: |
    #     sudo killall apt apt-get dpkg || true
    #     sudo rm -f /var/lib/apt/lists/lock
    #     sudo rm -f /var/cache/apt/archives/lock
    #     sudo rm -f /var/lib/dpkg/lock
    #     sudo rm -f /var/lib/dpkg/lock-frontend
    #   args:
    #     warn: false
    #   become: yes # Needs sudo to kill processes and remove lock files
    #   when: ansible_facts.os_family == "Debian" # Only run on Debian-based systems like Ubuntu/Zorin

    # - name: Update apt cache
    #   ansible.builtin.apt:
    #     update_cache: yes

    - name: Install common packages
      ansible.builtin.apt:
        name:
          - git
          - curl
          - wget
          - build-essential
        state: present
        update_cache: yes

# --- WezTerm Installation ---
    - name: Add WezTerm GPG key
      ansible.builtin.apt_key:
        url: https://apt.fury.io/wez/gpg.key
        state: present

    - name: Add WezTerm repository
      ansible.builtin.apt_repository:
        repo: "deb https://apt.fury.io/wez/ * *"
        state: present

    - name: Install WezTerm
      ansible.builtin.apt:
        name: wezterm
        state: present
        update_cache: yes

    # --- Helix Installation ---
    - name: Add Helix PPA
      ansible.builtin.apt_repository:
        repo: ppa:maveonair/helix-editor
        state: present

    - name: Install Helix
      ansible.builtin.apt:
        name: helix
        state: present
        update_cache: yes

    # --- Dotfiles Setup ---
    - name: Clone dotfiles repository
      ansible.builtin.git:
        repo: "{{ dotfiles_repo }}"
        dest: "/home/{{ ansible_user }}/dotfiles"
        version: main
      become: no

    - name: Check if setup.sh exists in dotfiles
      ansible.builtin.stat:
        path: "/home/{{ ansible_user }}/dotfiles/setup.sh"
      register: setup_script
      become: no

    - name: Make setup.sh executable
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/dotfiles/setup.sh"
        mode: '0755'
      become: no
      when: setup_script.stat.exists

    - name: Execute dotfiles setup script
      ansible.builtin.command:
        cmd: ./setup.sh
        chdir: "/home/{{ ansible_user }}/dotfiles"
      become: no
      when: setup_script.stat.exists

    # --- Go Installation ---
    - name: Download Go tarball
      ansible.builtin.get_url:
        url: "{{ go_download_url }}"
        dest: "/tmp/{{ go_tar_file }}"
        mode: '0644'

    - name: Delete existing Go installation directory if it exists
      ansible.builtin.file:
        path: "{{ go_install_dir }}/go"
        state: absent

    - name: Extract Go tarball to installation directory
      ansible.builtin.unarchive:
        src: "/tmp/{{ go_tar_file }}"
        dest: "{{ go_install_dir }}"
        remote_src: yes

    - name: Add Go to PATH for all users (via profile.d)
      ansible.builtin.blockinfile:
        path: /etc/profile.d/go_path.sh
        create: yes
        mode: '0755'
        block: |
          export PATH=$PATH:{{ go_install_dir }}/go/bin
          export GOPATH=$HOME/go

    - name: Verify Go version for the user
      ansible.builtin.command: "{{ go_install_dir }}/go/bin/go version"
      register: go_version_output
      become: no
      changed_when: false
